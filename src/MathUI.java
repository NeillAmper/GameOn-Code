
import java.awt.HeadlessException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

public final class MathUI extends javax.swing.JFrame {

    public static int index, score, maxscore;
    private String PlayerName, answer_selected, correctanswer;
    private static final String category_selected = CategorySelection.getCategorySelection_selected();

    private static final String[] FILE_PATH = {"src/QuizData.json", "src/UserData.json"};
    private static final JSONParser jsonParser = new JSONParser();
    private static JSONObject record = new JSONObject();
    private static JSONArray userlist = new JSONArray();
    private static final JSONArray trieslist = new JSONArray();

    public MathUI() {
        initComponents();

        startQuiz();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        questionUI = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        opt1UI = new javax.swing.JToggleButton();
        opt2UI = new javax.swing.JToggleButton();
        opt3UI = new javax.swing.JToggleButton();
        opt4UI = new javax.swing.JToggleButton();
        nxtbtn = new javax.swing.JButton();
        compbtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        questionUI.setText("jLabel1");

        jLabel2.setText("jLabel2");

        buttonGroup1.add(opt1UI);
        opt1UI.setText("jToggleButton1");
        opt1UI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opt1UIActionPerformed(evt);
            }
        });

        buttonGroup1.add(opt2UI);
        opt2UI.setText("jToggleButton2");
        opt2UI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opt2UIActionPerformed(evt);
            }
        });

        buttonGroup1.add(opt3UI);
        opt3UI.setText("jToggleButton3");
        opt3UI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opt3UIActionPerformed(evt);
            }
        });

        buttonGroup1.add(opt4UI);
        opt4UI.setText("jToggleButton4");
        opt4UI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opt4UIActionPerformed(evt);
            }
        });

        nxtbtn.setText("Next");
        nxtbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nxtbtnActionPerformed(evt);
            }
        });

        compbtn.setText("Complete");
        compbtn.setEnabled(false);
        compbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compbtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(177, 177, 177)
                        .addComponent(nxtbtn)
                        .addGap(121, 121, 121)
                        .addComponent(compbtn))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addComponent(opt1UI)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(opt2UI)
                        .addGap(18, 18, 18)
                        .addComponent(opt3UI)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(opt4UI)))
                .addContainerGap(32, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(37, 37, 37))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(questionUI)
                        .addGap(274, 274, 274))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel2)
                .addGap(77, 77, 77)
                .addComponent(questionUI)
                .addGap(106, 106, 106)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(opt1UI)
                    .addComponent(opt2UI)
                    .addComponent(opt3UI)
                    .addComponent(opt4UI))
                .addGap(45, 45, 45)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nxtbtn)
                    .addComponent(compbtn))
                .addContainerGap(49, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void nxtbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nxtbtnActionPerformed

        if (buttonGroup1.getSelection() == null) {

            JOptionPane.showMessageDialog(null, "Please select an answer to proceed.", "Error!", JOptionPane.ERROR_MESSAGE);
            return;

        }
        answer();
        correctanswer();
        startQuiz();


    }//GEN-LAST:event_nxtbtnActionPerformed

    private void opt1UIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opt1UIActionPerformed


    }//GEN-LAST:event_opt1UIActionPerformed

    private void opt2UIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opt2UIActionPerformed


    }//GEN-LAST:event_opt2UIActionPerformed

    private void opt3UIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opt3UIActionPerformed


    }//GEN-LAST:event_opt3UIActionPerformed

    private void opt4UIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opt4UIActionPerformed


    }//GEN-LAST:event_opt4UIActionPerformed

    private void compbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compbtnActionPerformed

        PlayerName = CategorySelection.getCategorySelection_Player();

        try {

            savefile();

        } catch (IOException ex) {
            Logger.getLogger(MathUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(MathUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        setVisible(false);
        QuizResult x = new QuizResult();
        x.setVisible(true);

    }//GEN-LAST:event_compbtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MathUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MathUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MathUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MathUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MathUI().setVisible(true);
        });
    }

    public void filecheck() throws FileNotFoundException, IOException, ParseException {
        FileReader reader = new FileReader(FILE_PATH[0]);

        if (reader.ready()) {
            Scanner scan = new Scanner(reader);
            String line = "";

            while (scan.hasNext()) {
                line = line + scan.nextLine();
            }
            reader.close();
            if (!line.equals("")) {
                reader.close();
                try (FileReader reader2 = new FileReader(FILE_PATH[0])) {
                    record = (JSONObject) jsonParser.parse(reader2);
                    userlist = (JSONArray) record.get("Quizzes");
                } catch (IOException a) {
                    System.out.println("error");
                }
            }
        }
    }

    public void startQuiz() {

        String hello = "Math";

        try {

            filecheck();

            while (index < userlist.size()) {
                Object obj = userlist.get(index);

                if (obj instanceof JSONObject jsonObject) {
                    String category = jsonObject.get("category").toString();

                    if (category_selected.equals(category)) {
                        // Show data
                        String question = jsonObject.get("question").toString();
                        String opt1 = jsonObject.get("option1").toString();
                        String opt2 = jsonObject.get("option2").toString();
                        String opt3 = jsonObject.get("option3").toString();
                        String opt4 = jsonObject.get("option4").toString();
                        correctanswer = jsonObject.get("answer").toString();
                        System.out.println(correctanswer);

                        questionUI.setText(question);
                        jLabel2.setText("Category: " + category);
                        opt1UI.setText(opt1);
                        opt2UI.setText(opt2);
                        opt3UI.setText(opt3);
                        opt4UI.setText(opt4);

                        maxscore++;
                        index++; // Move to next for next button click
                        return;  // Stop here since we found a match
                    }
                }
                index++; // Move to next item if not matched
            }

            // If loop exits, no more matching category
            System.out.println(score);
            questionUI.setText("Done!");
            nxtbtn.setEnabled(false);
            compbtn.setEnabled(true);

        } catch (HeadlessException | IOException | ParseException e) {
            Logger.getLogger(MathUI.class.getName()).log(Level.SEVERE, null, e);
            JOptionPane.showMessageDialog(null, "An error occurred while processing.", "Error!", JOptionPane.ERROR_MESSAGE);
        }

    }

    public void answer() {

        if (opt1UI.isSelected()) {

            answer_selected = opt1UI.getActionCommand();
            System.out.println("You've selected: " + answer_selected);

        }

        if (opt2UI.isSelected()) {

            answer_selected = opt2UI.getActionCommand();
            System.out.println("You've selected: " + answer_selected);

        }

        if (opt3UI.isSelected()) {

            answer_selected = opt3UI.getActionCommand();
            System.out.println("You've selected: " + answer_selected);

        }

        if (opt4UI.isSelected()) {

            answer_selected = opt4UI.getActionCommand();
            System.out.println("You've selected: " + answer_selected);

        }

    }

    public void correctanswer() {

        if (answer_selected.equals(correctanswer)) {

            score++;

        }

    }

    public void savefile() throws FileNotFoundException, IOException, ParseException {

        try {
            JSONObject data;
            JSONParser parser = new JSONParser();

            // Step 1: Read existing JSON from file
            File file = new File(FILE_PATH[0]);
            if (!file.exists() || file.length() == 0) {
                data = new JSONObject();
            } else {
                try (FileReader reader = new FileReader(file)) {
                    data = (JSONObject) parser.parse(reader);
                }
            }

            // Step 2: Get or create the "Tries" array
            JSONArray triesArray;
            if (data.containsKey("Tries")) {
                triesArray = (JSONArray) data.get("Tries");
            } else {
                triesArray = new JSONArray();
            }

            // Step 3: Create a new JSONObject to add
            JSONObject newTry = new JSONObject();
            newTry.put("score", String.valueOf(score));
            newTry.put("player", PlayerName);
            newTry.put("category", category_selected);

            // Step 4: Add the new try to the array
            triesArray.add(newTry);

            // Step 5: Update the original object and save to file
            data.put("Tries", triesArray);

            try (FileWriter writer = new FileWriter(FILE_PATH[0])) {
                writer.write(data.toJSONString());
                writer.flush();
                System.out.println("New try appended successfully.");
            }

        } catch (IOException | ParseException e) {
            System.out.println("Error updating JSON: " + e.getMessage());
        }

    }

    public static int finalscore() {

        return score;

    }

    public static int maxscore() {

        return maxscore;

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton compbtn;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton nxtbtn;
    private javax.swing.JToggleButton opt1UI;
    private javax.swing.JToggleButton opt2UI;
    private javax.swing.JToggleButton opt3UI;
    private javax.swing.JToggleButton opt4UI;
    private javax.swing.JLabel questionUI;
    // End of variables declaration//GEN-END:variables
}
